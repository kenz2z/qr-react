{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","conatiner","marginTop","title","display","justifyContent","alignItems","background","color","padding","btn","marginBottom","App","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","scanResultWebCam","setScanResultWebCam","_useState9","_useState10","_useState11","_useState12","_useState13","_useState14","classes","_useState15","useRef","_useState16","isShown","setIsShown","react_default","a","createElement","Container","className","Card","CardContent","Grid","item","xl","lg","md","sm","xs","type","value","onClick","event","current","lib_default","delay","style","width","height","onError","error","console","log","onScan","result","URLe","split_string","split","shift","toString","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.52da9f3f.chunk.js","sourcesContent":["import React, {useState, useRef} from 'react';\nimport {Container, Card, CardContent, makeStyles, Grid, TextField, Button} from '@material-ui/core';\nimport QRCode from 'qrcode';\nimport QrReader from 'react-qr-reader';\nimport $ from \"jquery\";\n\n\n\nfunction App() { \n  const [text, setText] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [scanResultFile, setScanResultFile] = useState('');\n  const [scanResultWebCam, setScanResultWebCam] =  useState('');\n  const [joke,setJoke ]= useState(\"\");\n  //ken add\n  const [name, setName] = useState(\"\");\n\tconst [result, setResult] = useState(\"\");\n  //\n\n  const classes = useStyles();\n  const qrRef = useRef(null);\n\n  const [isShown, setIsShown] = useState(false);\n\n  const handleClick = event => {\n    // 👇️ toggle shown state\n    setIsShown(current => !current);\n  }\n\n  \n  const handleChange = (e) => {\n    setName(\"e.target.value\");\n    console.log(name)\n  \n  \n  };\n\n\n  const generateQrCode = async () => {\n    try {\n          const response = await QRCode.toDataURL(text);\n          setImageUrl(response);\n    }catch (error) {\n      console.log(error);\n    }\n  }\n  const handleErrorFile = (error) => {\n    console.log(error);\n  }\n  const handleScanFile = (result) => {\n      if (result) {\n          setScanResultFile(result);\n      }\n  }\n  const onScanFile = () => {\n    qrRef.current.openImageDialog();\n  }\n  const handleErrorWebCam = (error) => {\n    console.log(error);\n  }\n  const handleScanWebCam = (result) => {\n    if (result){\n      console.log(\"start\")\n      let URLe=result;\n      console.log(\"1:\"+URLe)\n\n      let split_string = URLe.split(\":\");\n      split_string.shift();\n      console.log(\"2:\"+split_string)\n      URLe = split_string.toString();\n      split_string = URLe.split(\"@\");\n      console.log(\"3: +\"+split_string);\n      URLe = split_string[0].toString();\n      console.log(\"4: +\"+URLe);\n\n        setScanResultWebCam(URLe);\n        setIsShown(current => !current);\n\n\n    }\n   }\n\n\n\n\n     //<ken add >\n\n\n  \n  const handleSumbit = (e) => {\n    e.preventDefault();\n    const form = $(e.target);\n    $.ajax({\n       type: \"POST\",\n       url: form.attr(\"action\"),\n       data: form.serialize(),\n       success(data) {\n         setResult(data);\n      },\n    });\n   };\n   // ken add\n   const getJoke= () =>{\n\t\tlet baseURL='https://api.etherscan.io/api?module=account&action=tokennfttx&contractaddress=';\n\t\tlet contractAddress='0x7b8c062C9B8cbD756785E444FDcFCa79342a8Ee5';\n\t\tlet userAddress='&address=0xb3f678A06d688D0a90787914f94d051b445b50C3';\n\t\tlet block='&page=1&offset=100&startblock=0&endblock=27025780&sort=asc';\n\t\tlet API_KEY='MU7II9KNAHCJFU46FFD7PH5XVR6RY5I3RE';\n\t\tlet apiURL = baseURL +contractAddress+userAddress+block+API_KEY;\n\t\tfetch(apiURL)\n\t\t.then((response)=> response.json())\n\t\t.then((data)=>{\n\t\t\tlet etherscanData = data.result;\n\t\tconsole.log(etherscanData)\n\t\tlet sum=\"\"\n\t\t\tfor (var key in etherscanData) {\n\t\t\t\tif (etherscanData.hasOwnProperty(key)) {\n\t\t\t\t\tconsole.log(key + \" -> \" + etherscanData[key].tokenID);\n\t\t\t\t\tsum+=(\"blockNumber:\"+etherscanData[key].blockNumber+\"tokenID :\"+etherscanData[key].tokenID+\"<br>\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// setJoke(sum)\n\t\t});\n\t};\n\n  return (\n    <Container className={classes.conatiner}>\n          <Card>\n              <h2 className={classes.title}>Generate Download & Scan QR Code with React js</h2>\n              <CardContent>\n                  {/* <Grid container spacing={2}>\n                      <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n                          <TextField label=\"Enter Text Here\" onChange={(e) => setText(e.target.value)}/>\n                          <Button className={classes.btn} variant=\"contained\" \n                            color=\"primary\" onClick={() => generateQrCode()}>Generate</Button>\n                            <br/>\n                            <br/>\n                            <br/>\n                            {imageUrl ? (\n                              <a href={imageUrl} download>\n                                  <img src={imageUrl} alt=\"img\"/>\n                              </a>) : null}\n                      </Grid> */}\n                      {/* <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n                        <Button className={classes.btn} variant=\"contained\" color=\"secondary\" onClick={onScanFile}>Scan Qr Code</Button>\n                        <QrReader\n                          ref={qrRef}\n                          delay={300}\n                          style={{width: '100%'}}\n                          onError={handleErrorFile}\n                          onScan={handleScanFile}\n                          legacyMode\n                        />\n                        <h3>Scanned Code: {scanResultFile}</h3>\n                      </Grid> */}\n{/* \n                  </Grid> */}\n              </CardContent>\n              <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n                         <h3>Qr Code Scan by Web Cam</h3>\n                     \n                        <input type='text' value={scanResultWebCam} ></input> <button onClick={handleClick}>show qr scran</button>\n                        \n                       \n                         {isShown && (\n                         <QrReader\n                         delay={300}\n                         style={{width: '50%' ,height:'50%'}}\n                         onError={handleErrorWebCam}\n                         onScan={handleScanWebCam}\n                        \n                         />\n                         \n                         )}\n                         <br/>\n                         <button >submit</button>\n                          \n                         {/* //<h3>Scanned By WebCam Code: {scanResultWebCam}</h3> */}\n                    \n                      </Grid>\n          </Card>\n          {/* <div className=\"App\">\n\t\t\t<form\n\t\t\t\taction=\"http://localhost/reactphp/server.php\"\n\t\t\t\tmethod=\"post\"\n\t\t\t\tonSubmit={(event) => handleSumbit(event)}\n\t\t\t>\n\t\t\t\t<label htmlFor=\"name\">Nametest: </label>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tid=\"name\"\n\t\t\t\t\tname=\"name\"\n\t\t\t\t\t value={name}\n\t\t\t\t\t// onChange={(event) => handleChange(event)}\n\t\t\t\t/>\n\t\t\t\t<br />\n\t\t\t\t<button type=\"submit\" >Submit</button>\n        <button onClick={getJoke}>get URL</button>\n        {joke}\n\t\t\t</form>\n\t\t\t<h1>{result}</h1>\n\t\t</div> */}\n\n    {/* <div>\n\n  <button onClick={() =>{this.getTxn()}}>check API</button>\n    </div> */}\n    </Container>\n    \n  );\n}\n\n\nconst useStyles = makeStyles((theme) => ({\n    conatiner: {\n      marginTop: 10\n      \n    },\n    title: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems:  'center',\n      background: '#3f51b5',\n      color: '#fff',\n      padding: 20\n      \n    },\n    btn : {\n      marginTop: 10,\n      marginBottom: 20\n    }\n}));\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Ken from './Ken';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    {/* <Ken/> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}